#!/usr/bin/env ruby

require 'cqr/otp'
require 'optparse'
require 'base32'
require 'io/console'

options = { margin: 4, invert: true, type: 'totp' }

opt_parser = OptionParser.new do |opts|
  opts.on("-l LABEL", "--label=LABEL", String, "[required] displayed label") do |label|
    options[:label] = label
  end

  opts.on("-s SECRET", "--secret=SECRET", String, "[required] OTP secret") do |secret|
    options[:secret] = secret
  end

  opts.on("-m MARGIN", "--margin=MARGIN", Integer, "margin size in characters (default 4)") do |margin|
    p margin
    options[:margin] = margin
  end

  opts.on("-b", "--[no-]base32", "secret is base32 encoded (default is hexadecimal)") do |base|
    options[:base32] = base
  end

  opts.on("-i", "--no-invert", "don't invert colors (for black on white terminals)") do |invert|
    options[:invert] = invert
  end

  opts.on("-e", "--echo", "don't hide stdin") do |echo|
    options[:echo] = echo
  end

  opts.on("--issuer=ISSUER", String, "issuer of the secret") do |issuer|
    options[:issuer] = issuer
  end

  opts.on("-d DIGITS", "--digits=DIGITS", Integer, "hotp/totp, default to totp") do |digits|
    options[:digits] = digits
  end

  opts.on("-c COUNTER", "--counter=COUNTER", Integer, "counter state, required with hotp") do |counter|
    options[:counter] = counter
  end

  opts.on("-t TYPE", "--type=TYPE", String, "hotp/totp, default to totp") do |type|
    options[:type] = type
  end

  opts.on("-h", "--help", "display this message") do
    puts opt_parser
    exit
  end

  opts.separator ""
  opts.separator "for stdin input pass \"-\" as NAME/SECRET"
end

opt_parser.parse!


if !options.has_key?(:secret) || !options.has_key?(:label)
  puts opt_parser
  exit -1
end

if options.has_key?(:type) && options[:type] == "hotp" && !options.has_key?(:counter)
  puts opt_parser
  exit -1
end

if options[:secret] == "-"
  print "Enter secret: "
  if options[:echo]
    options[:secret] = STDIN.gets.chomp
  else
    options[:secret] = STDIN.noecho(&:gets).chomp
    puts
  end
end

if options[:label] == "-"
  print "Enter label: "
  if options[:echo]
    options[:label] = STDIN.gets.chomp
  else
    options[:label] = STDIN.noecho(&:gets).chomp
    puts
  end
end



if !options[:base32]
  binary = [options[:secret]].pack("H*")
  options[:secret] = Base32.encode(binary)
end



instance = CQR::OTP::Builder.new()
instance.secret  = options[:secret]
instance.issuer  = options[:issuer]
instance.type    = options[:type]
instance.digits  = options[:digits]
instance.counter = options[:counter]
instance.period  = options[:period]
instance.label   = options[:label]

qr_code = instance.to_qr
qr_code.margin  = options[:margin]
qr_code.invert  = options[:invert]

puts qr_code.to_s
